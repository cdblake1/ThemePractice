package com.gampro;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.json.JsonObject;

import main.java.riotapi.RiotApi;
import constant.Region;
import dto.Match.Event;
import dto.Match.Frame;
import dto.Match.MatchDetail;
import dto.Match.ParticipantIdentity;
import dto.MatchList.MatchList;
import dto.Summoner.Summoner;

/*
 * Pass 3 Arrays
 * 
 * 
 * 
 * 
 * 
 */


public class CreateJson {

	public static void readWriteJson(Region region, Long champId, String enemyChamp) {
		
		RiotApi api = new RiotApi("bf272907-42f9-4085-9470-1049579d9d2f");
		
		//stores summoner's match list
		MatchList matchList =  api.getMatchList(region, champId);
		ArrayList<Long> matchRef = new ArrayList<Long>();
		for(int i = 0; i < matchList.getEndIndex(); i++){
			matchRef.add(matchList.getMatches().get(i).getMatchId());
		}
		
		ArrayList<Integer> items = new ArrayList<Integer>();
		for(int k = 3; k < 4; k++){
			items.clear();
			ArrayList<Frame> frameList = new ArrayList<Frame>();
			Long matchOneId = matchRef.get(k);
			MatchDetail matchOne = api.getMatch(matchOneId, true);
			frameList.addAll((Collection<? extends Frame>)matchOne.getTimeline().getFrames());
			System.out.println("\nMatch ID: " + matchRef.get(k));
			
			//stores summoner's id local to the match
			int sumPartId = 0;
			for(ParticipantIdentity participant : matchOne.getParticipantIdentities()){
				if(participant.getPlayer().getSummonerId() == champId){
					sumPartId = participant.getParticipantId();
				}
			}
			
			//grabs starting items from frame 1 & 2
			ArrayList<Integer> startingItems = new ArrayList<Integer>();
			int counter = 1;
			for(Event event : frameList.get(counter).getEvents()){
				if(event.getParticipantId() == sumPartId && event.getEventType().equals("ITEM_PURCHASED")){
					if(event.getItemId() == 2010){
						startingItems.add(2003);
					} else {
						startingItems.add(event.getItemId());
					}
				}
				if(event.getParticipantId() == sumPartId && event.getEventType().equals("ITEM_UNDO")){
					if(event.getItemId() == 2010){
						startingItems.remove(2003);
					} else {
						startingItems.remove(event.getItemId());
					}
				}
				if(startingItems.isEmpty()){
					counter++;
					continue;
				}
			}
			
			ArrayList<Integer> coreItems = new ArrayList<Integer>();
			ArrayList<Integer> endGame = new ArrayList<Integer>();
			List<Integer> storedItemArrayList = Arrays.asList(storedItemIds);
			//stores the first three items as core items
			//stores the rest of the items as end game items
			for(int i = 3; i < frameList.size(); i++){	
				for(int j = 0; j < frameList.get(i).getEvents().size(); j++){
					Event curEvent = frameList.get(i).getEvents().get(j);
					if(curEvent.getParticipantId() == sumPartId && curEvent.getEventType().equals("ITEM_PURCHASED")){
						if(storedItemArrayList.contains(curEvent.getItemId())){
							if(coreItems.size() < 3){
								coreItems.add(curEvent.getItemId());
							}else{
								endGame.add(curEvent.getItemId());
							}
						}
					}
				}
			}
			//Records what items we're stored
			System.out.println("Starting Items: ");
			
			for(int itemId : startingItems){
				System.out.print(api.getDataItem(itemId).getName() + ", ");
			}
			
			System.out.println("\nCore Items: ");
			
			for(int itemId : coreItems){
				System.out.print(api.getDataItem(itemId).getName() + ", ");
			}
			
			System.out.println("\nEnd Game Items: ");
			
			for(int itemId : endGame){
				System.out.print(api.getDataItem(itemId).getName() + ", ");
			}
			
			JsonObject jObject = JsonFileBuilder.jsonObjectBuilder("vs EnemyChamp", startingItems, coreItems, endGame);
			try {
				FileWriter file = new FileWriter("C:\\Riot Games\\League of Legends\\Config\\Champions\\Cassiopeia\\Recommended\\" + "ItemSet_" + matchRef.get(k) +".json");
				
				file.write(jObject.toString());
				file.flush();
				file.close();

			} catch (IOException e) {
				e.printStackTrace();
			}
			System.out.println(jObject.toString());
		}
	}
}
